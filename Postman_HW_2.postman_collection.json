{
	"info": {
		"_postman_id": "307e8631-ecd3-40bd-9f94-28bf029f5286",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18387781"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string\r",
							"// Вариант 1:\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"// Вариант 2:\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name вбить руками)\r",
							"pm.test(\"The response name equals the request name\", function () {\r",
							"    pm.expect(resp.name).to.eql('John');\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age вбить руками)\r",
							"pm.test(\"The response age equals the request age\", function () {\r",
							"    pm.expect(resp.age).to.eql('27');\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary вбить руками)\r",
							"pm.test(\"The response salary equals the request salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(5000);\r",
							"});\r",
							"\r",
							"// Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"pm.test(\"The response name equals the request name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"The response age equals the request age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary забрать из request)\r",
							"pm.test(\"The response salary equals the request salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(resp.family)\r",
							"\r",
							"// Проверить, что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"The response u_salary_1_5_year equals the request salary*4\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"pm.test(\"The response name equals the request name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"The response age equals the request age\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary из request (salary забрать из request)\r",
							"pm.test(\"The response salary equals the request salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(resp.family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"The dog parameter has name\",function(){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"The dog parameter has age\",function(){\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"The name parameter equals Luky\", function(){\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"The age parameter equals 4\", function(){\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=John&age=27&salary=5000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "John"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"pm.test(\"The response name equals the request name\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"The response age equals the request age\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request\r",
							"console.log(req.salary);\r",
							"\r",
							"// Вывести в консоль параметр salary из response\r",
							"console.log(resp.salary);\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(resp.salary[0]);\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(resp.salary[1]);\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log(resp.salary[2]);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"The salary[0] parameter is equal to the request salary\", function(){\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"The salary[1] parameter is equal to the request salary*2\", function(){\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"The salary[2] parameter is equal to the request salary*3\", function(){\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp.salary[0]);\r",
							"\r",
							"// Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for(let i = 0; i < resp.length; i++){\r",
							"    console.log(resp.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name=John&age=27&salary=5000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "John"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"The json response has the start_qa_salary\", function(){\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"The json response has the qa_salary_after_6_months\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"The json response has the qa_salary_after_12_months\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"The json response has the qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"The json response has the qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"The json response has the person\", function(){\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"The start_qa_salary parameter equals the request salary\", function(){\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"The qa_salary_after_6_months parameter equals the request salary*2\", function(){\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"The qa_salary_after_12_months parameter equals the request salary*2.7\", function(){\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"The qa_salary_after_1.5_year parameter equals the request salary*3.3\", function(){\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req.salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"The qa_salary_after_3.5_years parameter equals the request salary*3.8\", function(){\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"In the person u_name[1] parameter equals the request salary\", function(){\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"In the person u_age parameter equals the request age\", function(){\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"In the person u_salary_5_years parameter equals the request salary*4.2\", function(){\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"\r",
							"for(const key in resp.person) {\r",
							"   if (typeof(resp.person[key]) == 'object') {\r",
							"       for (let i in Object.keys(resp.person[key])) {\r",
							"           console.log(resp.person[key][i]);\r",
							"       }\r",
							"   }\r",
							"   else if (typeof(resp.person[key]) != 'object') {\r",
							"        console.log(resp.person[key]);\r",
							"   }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://162.55.220.72",
			"type": "string"
		},
		{
			"key": "port",
			"value": "5005",
			"type": "string"
		}
	]
}